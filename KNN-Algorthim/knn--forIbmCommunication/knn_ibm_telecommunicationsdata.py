# -*- coding: utf-8 -*-
"""knn-IBM-telecommunicationsDATA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NZgps60T3B3n3SUMlRFqBtL-WNAQYx18

## Modules Import
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from sklearn import preprocessing
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics
# %matplotlib inline

"""## `Read The IBM Cloud Data `"""

!wget -O teleCust1000t.csv https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork/labs/Module%203/data/teleCust1000t.csv

"""**## Read the data from csv**

"""

data = pd.read_csv('teleCust1000t.csv')

"""##Read the first 5 rows in data  """

data.head()

"""##Information on Data """

print(f"The Data contains {data.shape[0]} Rows")
print(f"The Data contains {data.shape[1]} Coloums")
print(f"The Data contains {data.shape[1]-1} Featuers")
print(f"The Data contains {set(data['custcat'])} labels and they are {len(set(data['custcat']))} label")
print(f"The Data featuers are {list(data.columns)}")

"""##Read the data in term of x and y """

x=data.iloc[:,:-1]
y=data.iloc[:,-1]

"""##The X and Y Shapes"""

print(f"X Shape is {x.shape}")
print(f"Y shape is {y.shape}")

"""##Normalize the Data using preprocessing"""

x = preprocessing.StandardScaler().fit(x).transform(x.astype(float))
print(f"The X after normalizaion \n {x}")

"""##Divid The Data two Parts Test and Train"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=4)
print ('Train set:', X_train.shape,  y_train.shape)
print ('Test set:', X_test.shape,  y_test.shape)

"""##Train the Module using K=4"""

k = 4
#Train Model and Predict  
neigh = KNeighborsClassifier(n_neighbors = k).fit(X_train,y_train)

"""##The module Prediction """

yhat = neigh.predict(X_test)
print(f"The y predicted is: \n{yhat}")

"""##Get the module accuracy while testing and training using k=4"""

print("Train set Accuracy: ", metrics.accuracy_score(y_train, neigh.predict(X_train)))
print("Test set Accuracy: ", metrics.accuracy_score(y_test, yhat))

"""##LOOPIN TO GET THE HIGHER ACCURACY AT WHICH K?"""

Ks = 10 ##try k form 1 to 10
mean_acc = np.zeros((Ks-1)) ## an array to hold the accuracy results
for n in range(1,Ks):
    #Train Model and Predict  
    neigh = KNeighborsClassifier(n_neighbors = n).fit(X_train,y_train) ##fit at every the k from 1 to 10
    yhat=neigh.predict(X_test) ##perdict the y 
    mean_acc[n-1] = metrics.accuracy_score(y_test, yhat)##get the difference between the y perdicted and y test

result=[f"The Accuracy is={i} at k is={j+1}" for j,i in enumerate(list(mean_acc))]
for i in result: print(i,"\n")

"""##visual the result using matplot
 
"""

plt.plot(range(1,Ks),mean_acc,'g')
plt.ylabel('Accuracy ')
plt.xlabel('Number of Neighbors (K)')

"""# So we the highest accuracy is at k=9 equal to 0.34 """